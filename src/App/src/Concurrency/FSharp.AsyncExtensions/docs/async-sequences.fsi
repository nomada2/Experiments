namespace FSharp.Control
  type AsyncSeq<'T> = Async<AsyncSeqInner<'T>>
  and AsyncSeqInner<'T> =
    | Nil
    | Cons of 'T * AsyncSeq<'T>

  module AsyncSeq = begin
    [<GeneralizableValueAttribute ()>]
    val empty<'T> : AsyncSeq<'T>
    val singleton : 'T -> AsyncSeq<'T>
    val append : AsyncSeq<'T> -> AsyncSeq<'T> -> AsyncSeq<'T>
    
    [<Class>]
    // [snippet:builder]
    type AsyncSeqBuilder =
      // Waits for the result of a single asynchronous 
      // operation and then continues generating the sequence
      member Bind  : Async<'T> * ('T -> AsyncSeq<'U>) -> AsyncSeq<'U>

      // For every element of the input (asynchronous) sequence, 
      // yield all elements generated by the body of the for loop
      member For : AsyncSeq<'T> * ('T -> AsyncSeq<'TResult>) -> AsyncSeq<'TResult>
      member For : seq<'T>      * ('T -> AsyncSeq<'TResult>) -> AsyncSeq<'TResult>

      // Yield single/zero elements and concatenation of sequences
      member Yield : 'T   -> AsyncSeq<'T>
      member Zero  : unit -> AsyncSeq<'T>
      member Combine : AsyncSeq<'T> * AsyncSeq<'T> -> AsyncSeq<'T>

    type Microsoft.FSharp.Control.AsyncBuilder with
      // For every element of the input asynchronous sequence,
      // perform the specified asynchronous workflow
      member For : AsyncSeq<'T> * ('T -> Async<unit>) -> Async<unit>
    // [/snippet]

    val asyncSeq : AsyncSeqBuilder
    val internal tryNext : AsyncSeq<'a> -> Async<Choice<AsyncSeqInner<'a>,exn>>
    val internal tryWith : AsyncSeq<'T> -> (exn -> AsyncSeq<'T>) -> AsyncSeq<'T>
    val internal tryFinally : AsyncSeq<'T> -> (unit -> unit) -> AsyncSeq<'T>
    val collect :
      ('T -> AsyncSeq<'TResult>) -> AsyncSeq<'T> -> AsyncSeq<'TResult>
    val mapAsync : ('T -> Async<'TResult>) -> AsyncSeq<'T> -> AsyncSeq<'TResult>
    val chooseAsync : ('T -> Async<'R option>) -> AsyncSeq<'T> -> AsyncSeq<'R>
    val filterAsync : ('T -> Async<bool>) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val lastOrDefault : 'T -> AsyncSeq<'T> -> Async<'T>
    val firstOrDefault : 'T -> AsyncSeq<'T> -> Async<'T>
    val iterAsync : ('T -> Async<unit>) -> AsyncSeq<'T> -> Async<unit>
    val pairwise : AsyncSeq<'T> -> AsyncSeq<'T * 'T>

    // [snippet:fold/scan/take]
    // Aggregate all elements of async sequence using async function 
    // and return the result (as an asynchronous workflow)
    val foldAsync : ('S -> 'T -> Async<'S>) -> 'S -> AsyncSeq<'T> -> Async<'S>

    // Aggregate elements and yield immediate results as an async sequence
    // (The input is accessed lazily as the result sequence is evaluated)
    val scanAsync : ('S -> 'T -> Async<'S>) -> 'S -> AsyncSeq<'T> -> AsyncSeq<'S>

    // Same as previous functions, but the aggregating function is synchronous
    val fold : ('S -> 'T -> 'S) ->  'S -> AsyncSeq<'T> -> Async<'S>
    val scan : ('S -> 'T -> 'S) ->  'S -> AsyncSeq<'T> -> AsyncSeq<'S>

    // Synchronous and asynchronous version of a function that returns 
    // elements of the input sequence (lazily) while a predicate holds
    val takeWhileAsync : ('T -> Async<bool>) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val takeWhile : ('T -> bool) -> AsyncSeq<'T> -> AsyncSeq<'T>
    // [/snippet]

    val map : ('T -> 'a) -> AsyncSeq<'T> -> AsyncSeq<'a>
    val iter : ('T -> unit) -> AsyncSeq<'T> -> Async<unit>
    val choose : ('T -> 'a option) -> AsyncSeq<'T> -> AsyncSeq<'a>
    val filter : ('T -> bool) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val ofSeq : seq<'T> -> AsyncSeq<'T>
    type internal BufferMessage<'T> =
      | Get of AsyncReplyChannel<'T>
      | Put of 'T
    val ofObservableBuffered : System.IObservable<'a> -> AsyncSeq<'a>
    val ofObservable : System.IObservable<'a> -> AsyncSeq<'a>
    val toBlockingSeq : AsyncSeq<'T> -> seq<'T>
    val cache : AsyncSeq<'T> -> AsyncSeq<'T>
    val zip : AsyncSeq<'T1> -> AsyncSeq<'T2> -> AsyncSeq<'T1 * 'T2>
    val takeWhileAsync : ('T -> Async<bool>) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val skipWhileAsync : ('T -> Async<bool>) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val takeWhile : ('T -> bool) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val skipWhile : ('T -> bool) -> AsyncSeq<'T> -> AsyncSeq<'T>
    val take : int -> AsyncSeq<'T> -> AsyncSeq<'T>
    val skip : int -> AsyncSeq<'T> -> AsyncSeq<'T>
  end
  module Seq = begin
    val ofAsyncSeq : AsyncSeq<'T> -> seq<'T>
  end
  module AsyncSeqExtensions = begin
    val asyncSeq : AsyncSeq.AsyncSeqBuilder
    type AsyncBuilder with
      member For : seq:AsyncSeq<'T> * action:('T -> Async<unit>) -> Async<unit>
  end

  module IOExtensions = begin
    // [snippet:extensions]
    type System.IO.Stream with
      // Read the entire stream as an asynchronous 
      // sequence in chunks of the specified size
      member AsyncReadSeq : ?bufferSize:int -> AsyncSeq<byte []>

    type System.IO.Stream with
      // Asynchronously write all data from an 
      // asynchronous sequence to the current stream.
      member AsyncWriteSeq : AsyncSeq<byte []> -> Async<unit>
    // [/snippet]
  end

