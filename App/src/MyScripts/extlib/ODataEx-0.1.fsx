namespace global

#r "System.Data.Services.Client.dll"
#load "AsyncSeq-0.1.fsx"

open System.Data.Services.Client
open System.Linq
open Samples.FSharp.AsyncSeq

module OData = 

    let executePaginated (ctxt: DataServiceContext) (query : IQueryable<'T>) = 
        match query with 
        | :? DataServiceQuery<'T> as q ->
            seq { 
                let rec loop (cont: DataServiceQueryContinuation<'T>) = 
                    seq { if cont <> null then
                              let rsp = ctxt.Execute cont 
                              yield! rsp
                              yield! loop (rsp.GetContinuation()) }
                let rsp = q.Execute() 
                yield! rsp
                let cont = (rsp :?> QueryOperationResponse<'T>).GetContinuation()
                yield! loop cont }
        | _ -> failwith "the query is not a DataServiceQuery"
    //ctxt.SendingRequest.Add(fun e -> 
    //    e.RequestHeaders.["Authorization"] <- "OAuth " + securityToken)

[<AutoOpen>]
module ODataExtraQuerySyntax = 

    type Microsoft.FSharp.Linq.QueryBuilder with 
        // /// Add the query option to the URI generated by the query. The query source must be of type System.Data.Services.Client.DataServiceQuery.
        // [<CustomOperation("addOption",MaintainsVariableSpace=true)>]
        // member __.AddOption (svc: Linq.QuerySource<'T,System.Linq.IQueryable>, name, value:obj) = 
        //     match svc.Source with 
        //     | :? System.Data.Services.Client.DataServiceQuery<'T> as svc -> Linq.QuerySource<'T,System.Linq.IQueryable>(svc.AddQueryOption(name, value))
        //     | _ -> invalidOp (sprintf "This is not a known OData-LINQ query. The query is of type '%s' but type '%s' is expected to use this operator. See http://msdn.microsoft.com/en-us/library/ee622463.aspx" (svc.GetType().FullName) (typeof<System.Data.Services.Client.DataServiceQuery<'T>>.FullName))

        // /// Add the query option to the URI generated by the query. The query source must be of type System.Data.Services.Client.DataServiceQuery.
        // [<CustomOperation("expand",MaintainsVariableSpace=true)>]
        // member __.Expand (svc: Linq.QuerySource<'T,System.Linq.IQueryable>,path) = 
        //     match svc.Source with 
        //     | :? System.Data.Services.Client.DataServiceQuery<'T> as svc -> Linq.QuerySource<'T,System.Linq.IQueryable>(svc.Expand(path))
        //     | _ -> invalidOp (sprintf "This is not a known OData-LINQ query. The query is of type '%s' but type '%s' is expected to use this operator. See http://msdn.microsoft.com/en-us/library/ee622463.aspx" (svc.GetType().FullName) (typeof<System.Data.Services.Client.DataServiceQuery<'T>>.FullName))

        /// Add the query option to the URI generated by the query. The query source must be of type System.Data.Services.Client.DataServiceQuery.
        [<CustomOperation("goLocal",MaintainsVariableSpace=true)>]
        member __.GoLocal (svc: Linq.QuerySource<'T,System.Linq.IQueryable>) = 
            Linq.QuerySource<'T,System.Collections.IEnumerable>(Seq.readonly svc.Source)



(*

            namespace DataServiceAsyncExtensions
{
    using System;
    using System.Collections.Generic;
    using System.Data.Services.Client;
    using System.Threading.Tasks;
 
    public static class DataServiceQueryExtensions
    {
        public static Task<IEnumerable<T>> ExecuteAsync<T>(this DataServiceQuery<T> query, object state)
        {
            return Task.Factory.FromAsync<IEnumerable<T>>(query.BeginExecute, query.EndExecute, state);
        }
    }
 
    public static class DataServiceContextExtensions
    {
        public static Task<IEnumerable<T>> ExecuteAsync<T>(this DataServiceContext context, DataServiceQueryContinuation<T> continuation, object state)
        {
            return Task.Factory.FromAsync<DataServiceQueryContinuation<T>, IEnumerable<T>>(context.BeginExecute<T>, context.EndExecute<T>, continuation, state);
        }
 
        public static Task<IEnumerable<T>> ExecuteAsync<T>(this DataServiceContext context, Uri requestUri, object state)
        {
            return Task.Factory.FromAsync<Uri, IEnumerable<T>>(context.BeginExecute<T>, context.EndExecute<T>, requestUri, state);
        }
 
        public static Task<DataServiceResponse> ExecuteBatchAsync(this DataServiceContext context, object state, params DataServiceRequest[] queries)
        {
            if (context == null)
                throw new ArgumentNullException("context");
            return Task.Factory.FromAsync<DataServiceResponse>(context.BeginExecuteBatch(null, state, queries), context.EndExecuteBatch);
        }
 
        public static Task<DataServiceStreamResponse> GetReadStreamAsync(this DataServiceContext context, object entity, DataServiceRequestArgs args, object state)
        {
            return Task.Factory.FromAsync<object, DataServiceRequestArgs, DataServiceStreamResponse>(context.BeginGetReadStream, context.EndGetReadStream, entity, args, state);
        }
 
        public static Task<QueryOperationResponse> LoadPropertyAsync(this DataServiceContext context, object entity, string propertyName, object state)
        {
            return Task.Factory.FromAsync<object, string, QueryOperationResponse>(context.BeginLoadProperty, context.EndLoadProperty, entity, propertyName, state);
        }
 
        public static Task<QueryOperationResponse> LoadPropertyAsync(this DataServiceContext context, object entity, string propertyName, DataServiceQueryContinuation continuation, object state)
        {
            return Task.Factory.FromAsync<object, string, DataServiceQueryContinuation, QueryOperationResponse>(context.BeginLoadProperty, context.EndLoadProperty, entity, propertyName, continuation, state);
        }
 
        public static Task<QueryOperationResponse> LoadPropertyAsync(this DataServiceContext context, object entity, string propertyName, Uri nextLinkUri, object state)
        {
            return Task.Factory.FromAsync<object, string, Uri, QueryOperationResponse>(context.BeginLoadProperty, context.EndLoadProperty, entity, propertyName, nextLinkUri, state);
        }
 
        public static Task<DataServiceResponse> SaveChangesAsync(this DataServiceContext context, object state)
        {
            return Task.Factory.FromAsync<DataServiceResponse>(context.BeginSaveChanges, context.EndSaveChanges, state);
        }
 
        public static Task<DataServiceResponse> SaveChangesAsync(this DataServiceContext context, SaveChangesOptions options, object state)
        {
            return Task.Factory.FromAsync<SaveChangesOptions, DataServiceResponse>(context.BeginSaveChanges, context.EndSaveChanges, options, state);
        }
    }
}
*)
